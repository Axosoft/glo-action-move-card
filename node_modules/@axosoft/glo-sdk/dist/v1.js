"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
exports.default = v1;
function v1(token) {
    var _this = this;
    var axios = axios_1.default.create({
        baseURL: "https://gloapi.gitkraken.com/v1/",
        headers: {
            'Authorization': token
        }
    });
    var defaultGetAllBoardOptions = {
        archived: false,
        page: 1,
        per_page: 50,
        sort: 'asc',
        fields: ['name'],
    };
    var getAllBoards = function (options) { return __awaiter(_this, void 0, void 0, function () {
        var mergedOptions;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    mergedOptions = __assign({}, defaultGetAllBoardOptions, options);
                    return [4 /*yield*/, axios.get("/glo/boards?page=" + mergedOptions.page + "&per_page=" + mergedOptions.per_page + "&archived=" + mergedOptions.archived + "&sort=" + mergedOptions.sort + "&fields=" + mergedOptions.fields.join('%2C'))];
                case 1: return [2 /*return*/, (_a.sent()).data];
            }
        });
    }); };
    var boards = {
        get: function (board_id, options) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios.get("/glo/boards/" + board_id + "?fields=" + ((options && options.fields) || ['name']).join('%2C'))];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        }); },
        columns: {
            edit: function (board_id, column_id, _a) {
                var column_name = _a.column_name, position = _a.position;
                return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0: return [4 /*yield*/, axios.post("/glo/boards/" + board_id + "/columns/" + column_id, { name: column_name, position: position })];
                            case 1: return [2 /*return*/, (_b.sent()).data];
                        }
                    });
                });
            },
            delete: function (board_id, column_id) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, axios.delete("/glo/boards/" + board_id + "/columns/" + column_id)];
                        case 1: return [2 /*return*/, (_a.sent()).data];
                    }
                });
            }); },
            getCards: function (board_id, column_id, options) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, axios.get("/glo/boards/" + board_id + "/columns/" + column_id + "/cards?page=" + ((options && options.page) || 1) + "&per_page=" + ((options && options.per_page) || 50) + "&archived=" + ((options && options.archived) || false) + "&sort=" + ((options && options.sort) || 'asc') + "&fields=" + ((options && options.fields) || ['name', 'board_id', 'column_id']).join('%2C'))];
                        case 1: return [2 /*return*/, (_a.sent()).data];
                    }
                });
            }); },
            create: function (board_id, column_name, position) {
                if (position === void 0) { position = 0; }
                return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, axios.post("/glo/boards/" + board_id + "/columns", { name: column_name, position: position })];
                            case 1: return [2 /*return*/, (_a.sent()).data];
                        }
                    });
                });
            }
        },
        cards: {
            get: function (board_id, card_id, options) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, axios.get("/glo/boards/" + board_id + "/cards/" + card_id + "?fields=" + (options ? options.fields : ['name', 'board_id', 'card_id']).join('%2C'))];
                        case 1: return [2 /*return*/, (_a.sent()).data];
                    }
                });
            }); },
            edit: function (board_id, card_id, card) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, axios.post("/glo/boards/" + board_id + "/cards/" + card_id, card)];
                        case 1: return [2 /*return*/, (_a.sent()).data];
                    }
                });
            }); },
            delete: function (board_id, card_id) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, axios.delete("/glo/boards/" + board_id + "/cards/" + card_id)];
                        case 1: return [2 /*return*/, (_a.sent()).data];
                    }
                });
            }); },
            getAttachments: function (board_id, card_id, options) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, axios.get("/glo/boards/" + board_id + "/cards/" + card_id + "/attachments?page=" + ((options && options.page) || 1) + "&per_page=" + ((options && options.per_page) || 50) + "&sort=" + ((options && options.sort) || 'asc') + "&fields=" + ((options && options.fields) || ['filename', 'mime_type']).join('%2C'))];
                        case 1: return [2 /*return*/, (_a.sent()).data];
                    }
                });
            }); },
            comments: {
                edit: function (board_id, card_id, comment_id, comment) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, axios.post("/glo/boards/" + board_id + "/cards/" + card_id + "/comments/" + comment_id, comment)];
                            case 1: return [2 /*return*/, (_a.sent()).data];
                        }
                    });
                }); },
                delete: function (board_id, card_id, comment_id) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, axios.delete("/glo/boards/" + board_id + "/cards/" + card_id + "/comments/" + comment_id)];
                            case 1: return [2 /*return*/, (_a.sent()).data];
                        }
                    });
                }); },
                get: function (board_id, card_id, options) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, axios.get("/glo/boards/" + board_id + "/cards/" + card_id + "/comments?page=" + ((options && options.page) || 1) + "&per_page=" + ((options && options.per_page) || 50) + "&sort=" + ((options && options.sort) || 'asc') + "&fields=" + ((options && options.fields) || ['text']).join('%2C'))];
                            case 1: return [2 /*return*/, (_a.sent()).data];
                        }
                    });
                }); },
                create: function (board_id, card_id, comment) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, axios.post("/glo/boards/" + board_id + "/cards/" + card_id + "/comments", comment)];
                            case 1: return [2 /*return*/, (_a.sent()).data];
                        }
                    });
                }); }
            },
            getAll: function (board_id, options) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, axios.get("/glo/boards/" + board_id + "/cards?page=" + ((options && options.page) || 1) + "&per_page=" + ((options && options.per_page) || 50) + "&archived=" + ((options && options.archived) || false) + "&sort=" + ((options && options.sort) || 'asc') + "&fields=" + ((options && options.fields) || ['name', 'board_id', 'column_id']).join('%2C') + "\n        ")];
                        case 1: return [2 /*return*/, (_a.sent()).data];
                    }
                });
            }); },
            create: function (board_id, card) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, axios.post("/glo/boards/" + board_id + "/cards", card)];
                        case 1: return [2 /*return*/, (_a.sent()).data];
                    }
                });
            }); }
        },
        getAll: getAllBoards
    };
    var users = {
        getCurrentUser: function (options) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios.get("/glo/user?fields=" + ((options && options.fields) || ['username']).join('%2C'))];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        }); }
    };
    return {
        getAllBoards: getAllBoards,
        boards: boards,
        users: users
    };
}
