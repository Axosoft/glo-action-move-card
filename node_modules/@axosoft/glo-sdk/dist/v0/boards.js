"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var BoardFunctions = /** @class */ (function () {
    function BoardFunctions(axios) {
        this.axios = axios;
    }
    BoardFunctions.prototype.createBoard = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (name == null) {
                            throw 'Missing board name';
                        }
                        return [4 /*yield*/, this.axios.post("/api/glo/boards", {
                                name: name,
                                is_public: false
                            })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    BoardFunctions.prototype.deleteBoard = function (board_id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (board_id == null) {
                            throw 'Missing board ID';
                        }
                        return [4 /*yield*/, this.axios.delete("/api/glo/boards/" + board_id)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    BoardFunctions.prototype.archiveBoard = function (board_id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (board_id == null) {
                            throw 'Missing board ID';
                        }
                        return [4 /*yield*/, this.axios.post("/api/glo/boards/" + board_id + "/archive")];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    BoardFunctions.prototype.unarchiveBoard = function (board_id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (board_id == null) {
                            throw 'Missing board ID';
                        }
                        return [4 /*yield*/, this.axios.post("/api/glo/boards/" + board_id + "/unarchive")];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    BoardFunctions.prototype.renameBoard = function (board_id, newName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (board_id == null) {
                            throw 'Missing board ID';
                        }
                        if (newName == null) {
                            throw 'Missing new name';
                        }
                        return [4 /*yield*/, this.axios.post("/api/glo/boards/" + board_id, {
                                id: board_id,
                                name: newName
                            })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    BoardFunctions.prototype.inviteUserToBoard = function (board_id, userId, role) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (board_id == null) {
                            throw 'Missing board ID';
                        }
                        if (userId == null) {
                            throw 'Missing user ID';
                        }
                        if (role == null) {
                            throw 'Missing role';
                        }
                        return [4 /*yield*/, this.axios.post("/api/glo/boards/" + board_id + "/members", {
                                added: {
                                    id: userId,
                                    role: role
                                }
                            })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    BoardFunctions.prototype.removeUserFromBoard = function (board_id, member) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (board_id == null) {
                            throw 'Missing board ID';
                        }
                        if (member == null) {
                            throw 'Missing board member to remove';
                        }
                        return [4 /*yield*/, this.axios.post("/api/glo/boards/" + board_id + "/members", {
                                removed: member
                            })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    BoardFunctions.prototype.getBoardActivity = function (board_id, page, page_size) {
        if (page === void 0) { page = 1; }
        if (page_size === void 0) { page_size = 50; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (board_id == null) {
                            throw 'Missing board ID';
                        }
                        return [4 /*yield*/, this.axios.get("/api/activity/board/" + board_id + "?page=" + page + "&page_size=" + page_size)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    BoardFunctions.prototype.getBoards = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.axios.get("/api/glo/boards?archived=" + options.archived + "&fields=" + options.fields.join('%2C'))];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    BoardFunctions.prototype.getArchivedBoards = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBoards({
                            archived: true,
                            fields: options.fields
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return BoardFunctions;
}());
exports.default = BoardFunctions;
;
