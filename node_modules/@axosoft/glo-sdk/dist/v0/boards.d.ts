import { AxiosInstance } from "axios";
export default class BoardFunctions {
    axios: AxiosInstance;
    constructor(axios: AxiosInstance);
    createBoard(name: string): Promise<Board>;
    deleteBoard(board_id: string): Promise<void>;
    archiveBoard(board_id: string): Promise<void>;
    unarchiveBoard(board_id: string): Promise<void>;
    renameBoard(board_id: string, newName: string): Promise<void>;
    inviteUserToBoard(board_id: string, userId: string, role: 'full'): Promise<Board>;
    removeUserFromBoard(board_id: string, member: Member): Promise<Board>;
    getBoardActivity(board_id: string, page?: number, page_size?: number): Promise<[Activity]>;
    getBoards(options: {
        archived: boolean | null;
        fields: [BoardField];
    }): Promise<[Member]>;
    getArchivedBoards(options: {
        fields: [BoardField];
    }): Promise<[Member]>;
}
export declare type BoardField = keyof Board;
export declare type Board = {
    archived_columns: [string];
    columns: [string];
    created_by: string;
    created_date: string;
    external_provider_members: [Member];
    id: string;
    invited_members: [string];
    is_public: boolean;
    labels: [string];
    members: [Member];
    name: string;
};
export declare type Member = {
    created_date: string;
    email: string;
    glo_user: null;
    id: string;
    identities: [];
    name: string;
    role: string;
    sync_provider_identities: string;
    updated_date: string;
    username: string;
};
export declare type Activity = {
    activity_data: ActivityData;
    board_id: string;
    created_date: string;
    event: string;
    id: string;
    user_id: string;
};
export declare type ActivityData = {
    board: {
        id: string;
        name: string;
    };
    members: [Member];
    user: Member;
};
