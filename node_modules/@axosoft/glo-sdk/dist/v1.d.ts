import { Attachment, Board, Card, Column, Comment, GetAttachmentOptions, GetAllBoardOptions, GetBoardOptions, GetCardOptions, GetCommentOptions, GetUserOptions, PageOptions, User } from './v1_types';
export default v1;
declare function v1(token: string): {
    getAllBoards: (options?: GetAllBoardOptions | undefined) => Promise<[Board]>;
    boards: {
        get: (board_id: string, options?: GetBoardOptions | undefined) => Promise<Board>;
        columns: {
            edit: (board_id: string, column_id: string, { column_name, position }: {
                column_name?: string | undefined;
                position?: number | undefined;
            }) => Promise<Column>;
            delete: (board_id: string, column_id: string) => Promise<Column>;
            getCards: (board_id: string, column_id: string, options?: (GetCardOptions & PageOptions & {
                archived: boolean;
                sort: "asc" | "desc";
            }) | undefined) => Promise<[Card]>;
            create: (board_id: string, column_name: string, position?: number) => Promise<Column>;
        };
        cards: {
            get: (board_id: string, card_id: string, options?: GetCardOptions | undefined) => Promise<Card>;
            edit: (board_id: string, card_id: string, card: Card) => Promise<Card>;
            delete: (board_id: string, card_id: string) => Promise<any>;
            getAttachments: (board_id: string, card_id: string, options?: (GetAttachmentOptions & PageOptions & {
                sort: "asc" | "desc";
            }) | undefined) => Promise<[Attachment]>;
            comments: {
                edit: (board_id: string, card_id: string, comment_id: string, comment: Comment) => Promise<Comment>;
                delete: (board_id: string, card_id: string, comment_id: string) => Promise<any>;
                get: (board_id: string, card_id: string, options?: (GetCommentOptions & PageOptions & {
                    sort: "asc" | "desc";
                }) | undefined) => Promise<[Comment]>;
                create: (board_id: string, card_id: string, comment: Comment) => Promise<Comment>;
            };
            getAll: (board_id: string, options?: (GetCardOptions & PageOptions & {
                archived: boolean;
                sort: "asc" | "desc";
            }) | undefined) => Promise<[Card]>;
            create: (board_id: string, card: Card) => Promise<Card>;
        };
        getAll: (options?: GetAllBoardOptions | undefined) => Promise<[Board]>;
    };
    users: {
        getCurrentUser: (options?: GetUserOptions | undefined) => Promise<User>;
    };
};
